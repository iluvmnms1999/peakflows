use_r("peak_detect")
use_data_raw("rhv.tot")
use_data("rhv_tot")
## retaining hourly data
hv <- function(usgs) {
usgs$year <- year(usgs$date)
usgs$month <- formatC(month(usgs$date), width = 2, format = "d", flag = "0")
usgs$day <- formatC(mday(usgs$date), width = 2, format = "d", flag = "0")
usgs$hour <- substr(usgs$time, start = 1, stop = 2)
usgs$min <- substr(usgs$time, start = 4, stop = 5)
grusgs <- usgs %>%
group_by(year, month, day, hour) %>%
mutate(max_flow = max(v00060)) %>%
mutate(hdt = ymd_h(as.integer(paste0(year, month, day, hour)),
tz = "US/Pacific")) %>%
ungroup() %>%
group_by(hdt) %>%
summarise(
id = last(site_no),
max_flow = last(max_flow),
datetime = last(hdt)
) %>%
select(-hdt)
grusgs
}
## libraries
library(rsnodas2)
library(tidyverse)
## retaining hourly data
hv <- function(usgs) {
usgs$year <- year(usgs$date)
usgs$month <- formatC(month(usgs$date), width = 2, format = "d", flag = "0")
usgs$day <- formatC(mday(usgs$date), width = 2, format = "d", flag = "0")
usgs$hour <- substr(usgs$time, start = 1, stop = 2)
usgs$min <- substr(usgs$time, start = 4, stop = 5)
grusgs <- usgs %>%
group_by(year, month, day, hour) %>%
mutate(max_flow = max(v00060)) %>%
mutate(hdt = ymd_h(as.integer(paste0(year, month, day, hour)),
tz = "US/Pacific")) %>%
ungroup() %>%
group_by(hdt) %>%
summarise(
id = last(site_no),
max_flow = last(max_flow),
datetime = last(hdt)
) %>%
select(-hdt)
grusgs
}
## clean data for specific stations
clean_dat <- function(site_no, beg_date) {
usgs <- download_usgs(freq = "uv",
destpath = paste0(getwd(), "/data/usgs"),
sites = as.character(site_no),
begin_date = as.Date(beg_date),
end_date = Sys.Date()
)
# produce cleaned hourly data
test <- hv(usgs)
# HOURLY create vector of dates/ids
datetime <- seq(test$datetime[1],
with_tz(Sys.Date(), tzone = "US/Pacific"),
by = 'hour'
)
id <- rep(usgs$site_no[1], times = length(datetime))
df <- data.frame(id, datetime)
# produce actual time series
comp_test <- left_join(df, test)
imp_usgs <- na_interpolation(comp_test, option = "linear")
imp_usgs
}
## get data frame with all stations
stations <- c("10311000", "10309010", "10310500", "10309000", "10311200",
"10311100", "10308200", "10310000")
beg_dates <- c("1939-05-12", "2014-06-15", "1948-03-01", "1900-01-02",
"1976-07-01", "1976-06-01", "1960-09-01", "1900-10-02")
stat_list <- vector("list", length = length(stations))
for (i in seq_along(stations)) {
stat_list[[i]] <- clean_dat(stations[i], beg_dates[i])
}
clean_dat("10309010", "2014-06-15")
library(lubridate)
test <- clean_dat("10309010", "2014-06-15")
## clean data for specific stations
clean_dat <- function(site_no, beg_date) {
usgs <- download_usgs(freq = "uv",
destpath = paste0(getwd(), "/data-raw/usgs"),
sites = as.character(site_no),
begin_date = as.Date(beg_date),
end_date = Sys.Date()
)
# produce cleaned hourly data
test <- hv(usgs)
# HOURLY create vector of dates/ids
datetime <- seq(test$datetime[1],
with_tz(Sys.Date(), tzone = "US/Pacific"),
by = 'hour'
)
id <- rep(usgs$site_no[1], times = length(datetime))
df <- data.frame(id, datetime)
# produce actual time series
comp_test <- left_join(df, test)
imp_usgs <- na_interpolation(comp_test, option = "linear")
imp_usgs
}
test <- clean_dat("10309010", "2014-06-15")
library(imputeTS)
test <- clean_dat("10309010", "2014-06-15")
head(test)
unique(test$datetime)
unique(hour(test$datetime))
test[is.na(test)]
## get data frame with all stations
stations <- c("10311000", "10309010", "10310500", "10309000", "10311200",
"10311100", "10308200", "10310000")
beg_dates <- c("1939-05-12", "2014-06-15", "1948-03-01", "1900-01-02",
"1976-07-01", "1976-06-01", "1960-09-01", "1900-10-02")
stat_list <- vector("list", length = length(stations))
for (i in seq_along(stations)) {
stat_list[[i]] <- clean_dat(stations[i], beg_dates[i])
}
use_r("plot_generics")
load("~/github/packages/peakflows/data/rhv_tot.rda")
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks <- c(0.2, 0.172, 0.41, 0.079, 0.117, 0.39)
cutoffs <- cbind(stations, major, minor, fson, minpeaks)
head(cutoffs)
cutoffs_mat <- as.data.frame(stations, major, minor, fson, minpeaks)
cutoffs_list <- list(stations, major, minor, fson, minpeaks)
cutoffs_mat <- do.call(cbind, cutoffs_list)
cutoffs <- as.data.frame(cutoffs_mat)
cutoffs
usethis::use_data(cutoffs, overwrite = TRUE)
load("~/github/packages/peakflows/data/cutoffs.rda")
names(cutoffs)
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks <- c(0.2, 0.172, 0.41, 0.079, 0.117, 0.39)
cutoffs_list <- list(stations, major, minor, fson, minpeaks)
cutoffs_mat <- do.call(cbind, cutoffs_list)
cutoffs <- as.data.frame(cutoffs_mat)
colnames(cutoffs) <- c("stations", "major", "minor", "fson", "minpeaks")
usethis::use_data(cutoffs, overwrite = TRUE)
load("~/github/packages/peakflows/data/cutoffs.rda")
names(cutoffs)
head(rhv_tot)
load_all()
rlang::last_trace()
load_all()
df_peaks_all()
head(rhv_tot)
cutoffs[1, i]
cutoffs[1, 1]
class(rhv_tot$id)
class(cutoffs$stations)
cutoffs
filter(rhv_tot, id == cutoffs[1, 1])
filter(rhv_tot, "id" == cutoffs[1, 1])
library(tidyverse)
filter(rhv_tot, id == cutoffs[1, 1])
load_all()
df_peaks_all()
load_all()
df_peaks_all()
cutoffs
class(rhv_tot$max_flow)
class(rhv_tot$datetime)
class(cutoffs$major)
class(cutoffs$minor)
class(cutoffs$fson)
?data.frame
data.frame(c(stations, major, minor, fson, minpeaks))
class(cutoffs_list[[1]])
class(cutoffs_list[[2]])
class(cutoffs_list[[4]])
class(cutoffs_mat[,4])
data.frame(stations, major, minor, fson, minpeaks)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks)
class(cutoffs$fson)
usethis::use_data(cutoffs, overwrite = TRUE)
load("~/github/packages/peakflows/data/cutoffs.rda")
load_all()
df_peaks_all()
class(cutoffs$minpeaks)
class(rhv_tot$max_flow)
minpeak = cutoffs[5, 1]
cutoffs
load_all()
df_peaks_all()
load_all()
df_peaks_filt(10311000)
df_peaks_filt(10310500)
load_all()
df_peaks_filt(10311000)
df_peaks_filt(10309000)
load_all()
df_peaks_all()
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks100 <- c(0.2, 0.172, 0.41, 0.079, 0.117, 0.39)
minpeaks75 <- c(0.172, 0.127, 0.313, 0.058, 0.088, 0.294)
minpeaks50 <- c(0.115, 0.085, 0.208, 0.039, 0.059, 0.196)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks100, minpeaks75,
minpeaks50)
usethis::use_data(cutoffs, overwrite = TRUE)
load("~/github/packages/peakflows/data/cutoffs.rda")
View(cutoffs)
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks100 <- c(0.230, 0.169, 0.417, 0.077, 0.117, 0.392)
minpeaks75 <- c(0.172, 0.127, 0.313, 0.058, 0.088, 0.294)
minpeaks50 <- c(0.115, 0.085, 0.208, 0.039, 0.059, 0.196)
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks100 <- c(0.230, 0.169, 0.417, 0.077, 0.117, 0.392)
minpeaks75 <- c(0.172, 0.127, 0.313, 0.058, 0.088, 0.294)
minpeaks50 <- c(0.115, 0.085, 0.208, 0.039, 0.059, 0.196)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks100, minpeaks75,
minpeaks50)
usethis::use_data(cutoffs, overwrite = TRUE)
cutoffs$paste0("minpeaks", 50)
cutoffs$paste0("minpeaks", "50")
load_all()
df_peaks_all()
cutoffs$minor
load_all()
df_peaks_all(minpeaks75)
load_all()
df_peaks_all()
load_all()
df_peaks_all(minpeaks_spec = 50)
df_peaks_all(minpeaks_spec = 75)
df_peaks_all(minpeaks_spec = 50)
df_peaks_all(minpeaks_spec = 100)
load_all()
df_peaks_filt(10311000, 75)
filter(rhv_tot, id == as.character(10311000))
load_all/9
load_all()
df_peaks_filt(10311000, 75)
df_peaks_filt(10311000, 100)
load("~/github/packages/peakflows/data/rhv_tot.rda")
View(rhv_tot)
load_all()
df_peaks_all(100)
df_peaks_filt(10311000, 50)
