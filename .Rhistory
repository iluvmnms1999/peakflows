class(cutoffs_list[[4]])
class(cutoffs_mat[,4])
data.frame(stations, major, minor, fson, minpeaks)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks)
class(cutoffs$fson)
usethis::use_data(cutoffs, overwrite = TRUE)
load("~/github/packages/peakflows/data/cutoffs.rda")
load_all()
df_peaks_all()
class(cutoffs$minpeaks)
class(rhv_tot$max_flow)
minpeak = cutoffs[5, 1]
cutoffs
load_all()
df_peaks_all()
load_all()
df_peaks_filt(10311000)
df_peaks_filt(10310500)
load_all()
df_peaks_filt(10311000)
df_peaks_filt(10309000)
load_all()
df_peaks_all()
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks100 <- c(0.2, 0.172, 0.41, 0.079, 0.117, 0.39)
minpeaks75 <- c(0.172, 0.127, 0.313, 0.058, 0.088, 0.294)
minpeaks50 <- c(0.115, 0.085, 0.208, 0.039, 0.059, 0.196)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks100, minpeaks75,
minpeaks50)
usethis::use_data(cutoffs, overwrite = TRUE)
load("~/github/packages/peakflows/data/cutoffs.rda")
View(cutoffs)
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks100 <- c(0.230, 0.169, 0.417, 0.077, 0.117, 0.392)
minpeaks75 <- c(0.172, 0.127, 0.313, 0.058, 0.088, 0.294)
minpeaks50 <- c(0.115, 0.085, 0.208, 0.039, 0.059, 0.196)
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
major <- c(8300, NA, 10000, NA, NA, 14354)
minor <- c(7000, 45, 5500, 26, 14.75, 7400)
fson <- c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
minpeaks100 <- c(0.230, 0.169, 0.417, 0.077, 0.117, 0.392)
minpeaks75 <- c(0.172, 0.127, 0.313, 0.058, 0.088, 0.294)
minpeaks50 <- c(0.115, 0.085, 0.208, 0.039, 0.059, 0.196)
cutoffs <- data.frame(stations, major, minor, fson, minpeaks100, minpeaks75,
minpeaks50)
usethis::use_data(cutoffs, overwrite = TRUE)
cutoffs$paste0("minpeaks", 50)
cutoffs$paste0("minpeaks", "50")
load_all()
df_peaks_all()
cutoffs$minor
load_all()
df_peaks_all(minpeaks75)
load_all()
df_peaks_all()
load_all()
df_peaks_all(minpeaks_spec = 50)
df_peaks_all(minpeaks_spec = 75)
df_peaks_all(minpeaks_spec = 50)
df_peaks_all(minpeaks_spec = 100)
load_all()
df_peaks_filt(10311000, 75)
filter(rhv_tot, id == as.character(10311000))
load_all/9
load_all()
df_peaks_filt(10311000, 75)
df_peaks_filt(10311000, 100)
load("~/github/packages/peakflows/data/rhv_tot.rda")
View(rhv_tot)
load_all()
df_peaks_all(100)
df_peaks_filt(10311000, 50)
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(x, y, station, peaks, beg_date, end_date, ...) {
sub <- dplyr::filter(rhv_tot, id == as.character(station))
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
sub <- dplyr::filter(rhv_tot, id == as.character(station))
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
plot.peakflows(10311100, 100, 2017020100, 2017020500)
load_all()
plot.peakflows(10311100, 100, 2017020100, 2017020500)
library(ggplot2)
plot.peakflows(10311100, 100, 2017020100, 2017020500)
library(tidyverse)
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
sub <- dplyr::filter(rhv_tot, id == as.character(station))
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
plot.peakflows(10311100, 100, 2017020100, 2017020500)
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
# filter data frame for selected station
sub <- dplyr::filter(rhv_tot, id == as.character(station))
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
plot.peakflows(10311100, 100, 2017020100, 2017020500)
df_peaks_filt(10311100, 100)
plot.peakflows(10311100, 100, 2017010100, 2017013123)
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
# filter data frame for selected station
sub <- dplyr::filter(rhv_tot, id == as.character(station))
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle(paste0("Streamflow Peaks at Station",
as.character(station))) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
plot.peakflows(10311100, 100, 2017010100, 2017013123)
document()
plot(10311100, 100, 2017010100, 2017013123)
plot.peakflows(10311100, 100, 2017010100, 2017013123)
install.packages("reticulate")
document()
?plot.peakflows
plot.peakflows(10310500, 100, 2017010100, 2017011023)
load_all()
plot.peakflows(10310500, 100, 2017010100, 2017011023)
library(tidyverse)
head(filter(rhv_tot), id == "10311000")
head(rhv_tot)
head(filter(rhv_tot, id == "10311000"))
tail(filter(rhv_tot, id == "10311000"))
head(filter(rhv_tot, id == "10310500"))
tail(filter(rhv_tot, id == "10310500"))
head(filter(rhv_tot, id == "10309000"))
head(filter(rhv_tot, id == "10311200"))
head(filter(rhv_tot, id == "10311100"))
head(filter(rhv_tot, id == "10308200"))
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017011023)
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017011023)
plot.peakflows(10311000, 100, 2017010100, 2017013023)
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017013023)
df_peaks_filt(10311000, 100)
peaks_df <- df_peaks_filt(10311000, 100)
max(filter(10311000,
between(dt,ymd_h(2017010100,
tz = "US/Pacific"),
ymd_h(2017013023, tz = "US/Pacific")))$y)
max(filter(peaks_df,
between(dt,ymd_h(2017010100,
tz = "US/Pacific"),
ymd_h(2017013023, tz = "US/Pacific")))$y)
max(filter(peaks_df,
between(dt,lubridate::ymd_h(2017010100,
tz = "US/Pacific"),
lubridate::ymd_h(2017013023, tz = "US/Pacific")))$y)
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017013023)
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017013023)
head(rhv_tot)
filter(rhv_tot, id == "10311000" &&
between(datetime, lubridate::ymd_h(2017010100,
tz = "US/Pacific"),
lubridate::ymd_h(2017013023, tz = "US/Pacific"))
)
class(rhv_tot$datetime)
class(ymd_h(2017010100,
+                                               tz = "US/Pacific"))
class(ymd_h(2017010100, tz = "US/Pacific"))
class(lubridate::ymd_h(2017010100, tz = "US/Pacific"))
filter(rhv_tot, id == "10311000" &
between(datetime, lubridate::ymd_h(2017010100,
tz = "US/Pacific"),
lubridate::ymd_h(2017013023, tz = "US/Pacific"))
)
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017013123)
lubridate::ymd_h(2017010100, tz = "US/Pacific") +1
lubridate::ymd_h(2017010100, tz = "US/Pacific") + 1000
lubridate::ymd_h(2017010100, tz = "US/Pacific") + 172800
load_all()
plot.peakflows(10311000, 100, 2017010100, 2017013123)
load_all()
plot.peakflows(10310500, 50, 2005123000, 2006011000)
plot.peakflows(10310500, 50, 2016123000, 2017011000)
load_all()
plot.peakflows(10310500, 50, 2016123000, 2017011000)
load_all()
plot(10310500, 50, 2016123000, 2017011000)
load_all()
document()
use_mit_license()
peak_plot(10311000, 75, 2017010100, 2017022823)
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
peak_plot(10311000, 75, 2017010100, 2017022823)
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
plyr::round_any(10450, 100)
y_max <- 2300
ifelse(y_max + 0.2 * y_max > 1000, plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200, round_any(y_max + 0.2 * y_max, 100),
round_any(y_max + 0.2 * y_max, 10)))
y_max <- 500
ifelse(y_max + 0.2 * y_max > 1000, plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200, round_any(y_max + 0.2 * y_max, 100),
round_any(y_max + 0.2 * y_max, 10)))
y_max <- 500
ifelse(y_max + 0.2 * y_max > 1000, plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max, 100),
plyr::round_any(y_max + 0.2 * y_max, 10)))
y_max <- 40
ifelse(y_max + 0.2 * y_max > 1000, plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max, 100),
plyr::round_any(y_max + 0.2 * y_max, 10)))
y_max <- 40
ifelse(y_max + 0.2 * y_max > 20000, plyr::round_any(y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max, 100),
plyr::round_any(y_max + 0.2 * y_max, 10))))
y_max <- 15000
ifelse(y_max + 0.2 * y_max > 20000, plyr::round_any(y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max, 100),
plyr::round_any(y_max + 0.2 * y_max, 10))))
y_max <- 30000
ifelse(y_max + 0.2 * y_max > 20000, plyr::round_any(y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max, 100),
plyr::round_any(y_max + 0.2 * y_max, 10))))
y_max <- 30480
ifelse(y_max + 0.2 * y_max > 20000, plyr::round_any(y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max, 100),
plyr::round_any(y_max + 0.2 * y_max, 10))))
y_max <- 30480
# breaks
ifelse(y_max + 0.2 * y_max > 20000, seq(0, y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
seq(0, y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
seq(0, y_max + 0.2 * y_max, 100),
seq(0, y_max + 0.2 * y_max, 10))))
y_max <- 3050
# breaks
ifelse(y_max + 0.2 * y_max > 20000, seq(0, y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
seq(0, y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
seq(0, y_max + 0.2 * y_max, 100),
seq(0, y_max + 0.2 * y_max, 10))))
seq(0, y_max + 0.2 * y_max, 10000)
seq(0, y_max + 0.2 * y_max, 1000)
# breaks
ifelse(y_max + 0.2 * y_max > 20000, seq(0, y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
seq(0, y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
seq(0, y_max + 0.2 * y_max, 100),
seq(0, y_max + 0.2 * y_max, 10))))
?ifelse
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
?scale_y_continuous
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
?scale_x_datetime
load_all()
peak_plot(10311000, 75, 2017010100, 2017022823)
load_all()
peak_plot(10310500, 75, 2017010100, 2017022823)
peak_plot(10309000, 50, 2017010100, 2017022823)
load_all()
peak_plot(10309000, 50, 2017010100, 2017022823)
load_all()
peak_plot(10309000, 50, 2017010100, 2017022823)
load_all()
peak_plot(10309000, 50, 2017010100, 2017022823)
peak_plot(10311100, 50, 2017010100, 2017022823)
peak_plot(10308200, 50, 2017010100, 2017022823)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
?between
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
lubridate::ymd_h(2017010100, tz = "US/Pacific")
sub <- dplyr::filter(rhv_tot, id == as.character(10311000) &
dplyr::between(datetime, lubridate::ymd_h(2017010100,
tz = "US/Pacific"),
lubridate::ymd_h(2017013123, tz = "US/Pacific")
)
)
is.na(sub)
sum(is.na(sub))
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
class(ymd(20180304))
class(lubridate::ymd(20180304))
class(lubridate::ymd(20180304, tz = "US/Pacific"))
lubridate::ymd_h(2016022304, tz = "US/Pacific")
lubridate::ymd_h(2016022304, tz = "US/Pacific") + 100
lubridate::ymd_h(2016022304, tz = "US/Pacific") + 3451834
xlim(lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
lubridate::ymd_h(2018070321, tz = "US/Pacific" + 604800)
)
xlim(lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
lubridate::ymd_h(2018070321, tz = "US/Pacific") + 604800)
)
xlim(lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
lubridate::ymd_h(2018070321, tz = "US/Pacific") + 604800
)
lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
seq(lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
lubridate::ymd_h(2018070321, tz = "US/Pacific") + 604800)
seq(lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
lubridate::ymd_h(2018070321, tz = "US/Pacific") + 604800, by = "week")
seq(lubridate::ymd_h(2019050623, tz = "US/Pacific") - 604800,
lubridate::ymd_h(2019070321, tz = "US/Pacific") + 604800, by = "week")
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
load_all()
peak_plot(10311000, 100, 2017010100, 2017013123)
peak_plot(1030500, 100, 2017010100, 2017013123)
peak_plot(10310500, 100, 2017010100, 2017013123)
document()
document()
install.packages("roxygen2")
install.packages("roxygen2")
document()
check()
library(devtools)
check()
check()
load("~/github/packages/peakflows/data/rhv_tot.rda")
head(rhv_tot)
load("~/github/packages/peakflows/data/cutoffs.rda")
View(cutoffs)
head(cutoffs)
check()
document()
?install.package
?install.packages
document()
?rhv_tot
check()
git add .
check()
usethis::use_github_action_check_standard
usethis::use_github_action_check_standard()
