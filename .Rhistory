# graph for verification
sub <- dplyr::filter(rhv_tot, id == "10311100")
sub
peaks <- dplyr::filter(peaks_df, id == "10311100")
peaks <- dplyr::filter(peaks_df, id == "10311100")
plot.peakflows <- function(sub, peaks, x, y, ...) {
ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(ymd_h(2017020101, tz = "US/Pacific"),
ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
geom_point(data = peaks, aes(as.POSIXct(dt), y),
color = ifelse(peaks$ros == "ros",
"#335978",
ifelse(peaks$ros == "pot-ros",
"#41ab5d", "#bf812d")
)
)
}
# graph for verification
sub <- dplyr::filter(rhv_tot, id == "10311100")
peaks <- dplyr::filter(peaks_df, id == "10311100")
# ros classification plot
ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(ymd_h(2017020101, tz = "US/Pacific"),
ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
geom_point(data = peaks, aes(as.POSIXct(dt), y),
color = ifelse(peaks$ros == "ros",
"#335978",
ifelse(peaks$ros == "pot-ros",
"#41ab5d", "#bf812d")
)
)
library(ggplot2)
# ros classification plot
ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(ymd_h(2017020101, tz = "US/Pacific"),
ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
geom_point(data = peaks, aes(as.POSIXct(dt), y),
color = ifelse(peaks$ros == "ros",
"#335978",
ifelse(peaks$ros == "pot-ros",
"#41ab5d", "#bf812d")
)
)
??ymd_h
# ros classification plot
ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(2017020101, tz = "US/Pacific"),
lubridate::ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
geom_point(data = peaks, aes(as.POSIXct(dt), y),
color = ifelse(peaks$ros == "ros",
"#335978",
ifelse(peaks$ros == "pot-ros",
"#41ab5d", "#bf812d")
)
)
# graph for verification
sub <- dplyr::filter(rhv_tot, id == "10311100")
peaks <- dplyr::filter(peaks_df, id == "10311100")
plot.peakflows <- function(station, peaks, x, y, ...) {
sub <- dplyr::filter(rhv_tot, id == as.character(station))
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(2017020101, tz = "US/Pacific"),
lubridate::ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
devtools::load_all()
rlang::last_trace()
devtools::load_all()
dplyr::filter(rhv_tot, id == as.character(station))
dplyr::filter(rhv_tot, id == 10311000)
rhv_tot
devtools::load_all()
plot.peakflows <- function(station, peaks, x, y, ...) {
sub <- dplyr::filter(rhv_tot, id == as.character(station))
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(2017020101, tz = "US/Pacific"),
lubridate::ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(station, peaks, x, y, ...) {
sub <- dplyr::filter(rhv_tot, id == as.character(station))
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle("2017: Streamflow Peaks at Station 10311100") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(2017020101, tz = "US/Pacific"),
lubridate::ymd_h(2017022823, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
library(devtools)
devtools::load_all()
## Test
plot()
#   # add points for defined peaks
#   geom_point(data = peaks, aes(as.POSIXct(dt), y),
#              color = ifelse(peaks$ros == "ros",
#                             "#335978",
#                             ifelse(peaks$ros == "pot-ros",
#                                    "#41ab5d", "#bf812d")
#              )
#   )
#
# Creating the function...
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
# filter data frame for selected station
sub <- dplyr::filter(rhv_tot, id == as.character(station))
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle(paste0("Streamflow Peaks at Station",
as.character(station))) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
load("~/github/peakflows/data/cutoffs.rda")
View(cutoffs)
View(cutoffs)
load("~/github/peakflows/data/rhv_tot.rda")
View(rhv_tot)
View(rhv_tot)
class(rhv_tot)
class(rhv_tot$datetime)
#'    of when to include the data in the graph represented in the format
#'    YYYY-MM-DD
#'
#' @param end_date
#'
#' @param x An object required to run the function
#' @param y An object required to run the function
#' @param ... Other parameters
#'
#' @export
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
# filter data frame for selected station
sub <- dplyr::filter(rhv_tot, id == as.character(station))
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle(paste0("Streamflow Peaks at Station",
as.character(station))) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
plot.peakflows(10311000)
#'    of when to include the data in the graph represented in the format
#'    YYYY-MM-DD
#'
#' @param end_date
#'
#' @param x An object required to run the function
#' @param y An object required to run the function
#' @param ... Other parameters
#'
#' @export
plot.peakflows <- function(station, peaks, beg_date, end_date, x, y, ...) {
# filter data frame for selected station
sub <- dplyr::filter(rhv_tot, id == as.character(station))
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
ggplot2::ggplot(sub, aes(x = as.POSIXct(datetime), y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle(paste0("Streamflow Peaks at Station",
as.character(station))) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
xlim(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(limits = c(0, 140), breaks = seq(0, 140, 20)) +
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
plot.peakflows(10311000)
library(devtools)
devtools::install()
devtools::document()
devtools::install()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
devtools::document()
devtools::check()
install()
lintr:::addin_lint_package()
library(devtools)
use_readme_rmd()
devtools::check()
stations
library(peakflows)
## get data frame with all stations
stations <- c("10311000", "10310500", "10309000", "10311200",
"10311100", "10308200")
library(peakflows)
stations
peak_plot("10311000", 100)
?peak_plot
library(peakflows)
peak_plot("10311000", 100, 1989100101,)
peakflows::peak_plot("10311000", 100, 1989100101)
rhv_tot
usethis::use_vignette("peak-flows-vignette")
Everything after this is just random stuff
usethis::use_vignette("peak-flows-vignette")
peak_plot(10311000, 100, 2017010100)
library(peakflows)
peak_plot(10311000, 100, 2017010100, 2018010100)
load_all(".")
devtools::load_all(".")
peak_plot(10311000, 100, 2017010100, 2018010100)
peak_plot(10311000, 100, 2017010100, 2017020100)
devtools::load_all(".")
peak_plot(10311000, 100, 2017010100, 2017020100)
library(peakflows)
df_peaks_all(75)[1:10]
df_peaks_all(75)
class(df_peaks_all(75))
df_peaks_all(75)[1:10]
df_peaks_all(75)[1:10,]
df_peaks_all(100)
df_peaks_all(75)
df_peaks_all(50)
head(df_peaks_all(50), 10)
#'
#'     10311000: 1989-10-01 01:00:00
#'     10310500: 1989-01-19 00:00:00
#'     10309000: 1990-10-01 01:00:00
#'     10311200: 1990-10-01 01:00:00
#'     10311100: 1990-10-01 01:00:00
#'     10308200: 1990-10-01 01:00:00
#'
#' @import ggplot2
#' @export
peak_plot <- function(station, peaks, beg_date, end_date) {
# filter data frame for selected station
sub <- dplyr::filter(rhv_tot, id == as.character(station) &
dplyr::between(datetime,
lubridate::ymd_h(beg_date,
tz = "US/Pacific"),
lubridate::ymd_h(end_date,
tz = "US/Pacific")
)
)
# add points for defined peaks
peaks_df <- df_peaks_filt(station, peaks)
# set maximum of y axis
y_max <- max(dplyr::filter(peaks_df,
dplyr::between(dt,
lubridate::ymd_h(beg_date,
tz = "US/Pacific"),
lubridate::ymd_h(end_date,
tz = "US/Pacific")
)
)$y
)
# create plot of data and peak classification
ggplot2::ggplot(sub, ggplot2::aes(x = as.POSIXct(datetime),
y = max_flow)) +
geom_point(size = .2, col = "grey50") +
ggtitle(paste0("Streamflow Peaks at Station ",
as.character(station))) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("DateTime") +
scale_x_datetime(
limits = c(lubridate::ymd_h(beg_date, tz = "US/Pacific"),
lubridate::ymd_h(end_date, tz = "US/Pacific")),
date_breaks = "1 week",
date_labels = "%m-%d-%y"
) +
ylab("Discharge amount (ft^3 per sec)") +
scale_y_continuous(
limits = c(0, ifelse(y_max + 0.2 * y_max > 20000,
plyr::round_any(y_max + 0.2 * y_max, 10000),
ifelse(y_max + 0.2 * y_max > 2000,
plyr::round_any(y_max + 0.2 * y_max, 1000),
ifelse(y_max + 0.2 * y_max > 200,
plyr::round_any(y_max + 0.2 * y_max,
100),
plyr::round_any(y_max + 0.2 * y_max,
10))))),
n.breaks = 5, breaks = waiver()) +
geom_point(data = peaks_df, aes(as.POSIXct(dt), y),
color = ifelse(peaks_df$type %in% c("major", "flood"),
"red3",
ifelse(peaks_df$type == "minor",
"gold", "green3")
)
)
}
peak_plot(10311000, 100, 2017010100, 2017020100)
df_peaks_filt(station = "10311100", minpeaks_spec = 75)
peak_plot(10311000, 100, 2017010100, 2017020100)
peak_plot(10311000, 100, 2016010100, 2016020100)
peak_plot(10311100, 100, 1993010100, 1993020100)
peak_plot(10311100, 100, 2000010100, 2000020100)
peak_plot(10311000, 75, 2017010100, 2017020100)
peak_plot(10311000, 50, 2017010100, 2017020100)
peak_plot(10311100, 100, 2017010100, 2017020100)
peak_plot(10311100, 75, 2000010100, 2000020100)
peak_plot(10311100, 100, 2000010100, 2000020100)
peak_plot(10311100, 75, 2017010100, 2017020100)
peak_plot(10311100, 100, 2017010100, 2017020100)
peak_plot(10311000, 100, 2018010100, 2018020100)
peak_plot(10308200, 100, 2000010100, 2000020100)
peak_plot(10308200, 100, 2016010100, 2016020100)
peak_plot(10308200, 100, 2017010100, 2017020100)
peak_plot(10311000, 100, 2017010100, 2017020100)
peak_plot(10308200, 100, 2018010100, 2018020100)
peak_plot(10308200, 100, 2017010100, 2017020100)
peak_plot(10311100, 100, 2017010100, 2017020100)
peak_plot(10311100, 100, 2017010100, 2017020100)
peak_plot(10311000, 100, 2017010100, 2017020100)
peak_plot(10308200, 100, 2017010100, 2017020100)
library(peakflows)
devtools::load_all(".")
rm(list=c("peak_plot"))
devtools::document(".")
peak_plot(10311000, 100, 2017010100, 2017020100)
devtools::load_all(".")
peak_plot(10311000, 100, 2017010100, 2017020100)
library(peakflows)
head(df_peaks_all(100))
peak_plot(10311000, 100, 2017010100, 2017020100)
devtools::install()
peak_plot(10311000, 100, 2017010100, 2017020100)
lintr:::addin_lint()
lintr:::addin_lint()
devtools::load_all(".")
library(peakflows)
peak_plot(station = 10311000, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10311100, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(10308200, 100, 2017010100, 2017020100)
peak_plot(station = 10308200, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10311000, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10311100, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10308200, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
devtools::load_all(".")
devtools::check()
devtools::check()
library(devtools)
use_readme_rmd()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library(peakflows)
```{r, warning = FALSE, fig.cap = "Figure 3: peak_flows plot for station 10308200 over January 2017"}
peak_plot(station = 10308200, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
lintr:::addin_lint_package()
library(peakflows)
peak_window
peakwindow
lintr:::addin_lint_package()
lintr:::addin_lint_package()
library(devtools)
devtools::check()
library(peakflows)
peak_plot(station = 10308200, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
```{r, warning = FALSE, fig.cap = "Figure 3: peak_flows plot for station 10308200 over January 2017", fig.height = 4, fig.width = 5}
peak_plot(station = 10308200, peaks = 100,
beg_date = 2017020100, end_date = 2017030100)
peak_plot(station = 10308200, peaks = 50,
beg_date = 2017020100, end_date = 2017030100)
peak_plot(station = 10308200, peaks = 50,
beg_date = 2006020100, end_date = 2017030100)
peak_plot(station = 10308200, peaks = 50,
beg_date = 2006010100, end_date = 2006030100)
peak_plot(station = 10308200, peaks = 50,
beg_date = 2016010100, end_date = 2016030100)
library(peakflows)
peak_plot(station = 10311100, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10309000, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10311200, peaks = 100,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10311200, peaks = 100,
beg_date = 2017020100, end_date = 2017030100)
peak_plot(station = 10311200, peaks = 50,
beg_date = 2017020100, end_date = 2017030100)
peak_plot(station = 10311200, peaks = 50,
beg_date = 2016110100, end_date = 2016120100)
peak_plot(station = 10311200, peaks = 50,
beg_date = 2016110100, end_date = 2016120100)
peak_plot(station = 10311200, peaks = 50,
beg_date = 2017020100, end_date = 2017030100)
peak_plot(station = 10311200, peaks = 50,
beg_date = 2017010100, end_date = 2017020100)
peak_plot(station = 10311200, peaks = 50,
beg_date = 2017020100, end_date = 2017030100)
peak_plot(station = 10309000, peaks = 50,
beg_date = 2017010100, end_date = 2017020100)
